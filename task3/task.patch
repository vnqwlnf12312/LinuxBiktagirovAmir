diff --git a/linux-6.14.6/fs/proc/base.c b/linux-6.14.6/fs/proc/base.c
index 7feb8f4..35dedab 100644
--- a/linux-6.14.6/fs/proc/base.c
+++ b/linux-6.14.6/fs/proc/base.c
@@ -3296,6 +3296,14 @@ static int proc_pid_ksm_stat(struct seq_file *m, struct pid_namespace *ns,
 }
 #endif /* CONFIG_KSM */
 
+static int proc_pid_scheduled_amount(struct seq_file *m, struct pid_namespace *ns,
+				struct pid *pid, struct task_struct *task)
+{
+	int scheduled_amount = atomic_read(&task->scheduled_amount);
+	seq_printf(m, "%d\n", scheduled_amount);
+	return 0;
+}
+
 #ifdef CONFIG_STACKLEAK_METRICS
 static int proc_stack_depth(struct seq_file *m, struct pid_namespace *ns,
 				struct pid *pid, struct task_struct *task)
@@ -3431,6 +3439,7 @@ static const struct pid_entry tgid_base_stuff[] = {
 	ONE("ksm_merging_pages",  S_IRUSR, proc_pid_ksm_merging_pages),
 	ONE("ksm_stat",  S_IRUSR, proc_pid_ksm_stat),
 #endif
+	ONE("scheduled_amount", S_IRUSR, proc_pid_scheduled_amount),
 };
 
 static int proc_tgid_base_readdir(struct file *file, struct dir_context *ctx)
diff --git a/linux-6.14.6/include/linux/sched.h b/linux-6.14.6/include/linux/sched.h
index 6e5c387..96c71f8 100644
--- a/linux-6.14.6/include/linux/sched.h
+++ b/linux-6.14.6/include/linux/sched.h
@@ -1626,6 +1626,8 @@ struct task_struct {
 	struct user_event_mm		*user_event_mm;
 #endif
 
+
+	atomic_t scheduled_amount;
 	/*
 	 * New fields for task_struct should be added above here, so that
 	 * they are included in the randomized portion of task_struct.
diff --git a/linux-6.14.6/init/init_task.c b/linux-6.14.6/init/init_task.c
index e557f62..2fea7ab 100644
--- a/linux-6.14.6/init/init_task.c
+++ b/linux-6.14.6/init/init_task.c
@@ -101,6 +101,7 @@ struct task_struct init_task __aligned(L1_CACHE_BYTES) = {
 #ifdef CONFIG_CGROUP_SCHED
 	.sched_task_group = &root_task_group,
 #endif
+	.scheduled_amount = ATOMIC_INIT(0),
 #ifdef CONFIG_SCHED_CLASS_EXT
 	.scx		= {
 		.dsq_list.node	= LIST_HEAD_INIT(init_task.scx.dsq_list.node),
diff --git a/linux-6.14.6/kernel/fork.c b/linux-6.14.6/kernel/fork.c
index ca2ca38..51f24dd 100644
--- a/linux-6.14.6/kernel/fork.c
+++ b/linux-6.14.6/kernel/fork.c
@@ -2817,6 +2817,7 @@ pid_t kernel_clone(struct kernel_clone_args *args)
 	}
 
 	p = copy_process(NULL, trace, NUMA_NO_NODE, args);
+	atomic_set(&p->scheduled_amount, 0);
 	add_latent_entropy();
 
 	if (IS_ERR(p))
diff --git a/linux-6.14.6/kernel/sched/core.c b/linux-6.14.6/kernel/sched/core.c
index 3c7c942..85f7314 100644
--- a/linux-6.14.6/kernel/sched/core.c
+++ b/linux-6.14.6/kernel/sched/core.c
@@ -6847,6 +6847,7 @@ static __always_inline void __schedule_loop(int sched_mode)
 asmlinkage __visible void __sched schedule(void)
 {
 	struct task_struct *tsk = current;
+	atomic_inc(&tsk->scheduled_amount);
 
 #ifdef CONFIG_RT_MUTEXES
 	lockdep_assert(!tsk->sched_rt_mutex);
